# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: appointments


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  region: us-west-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  appointmentList: # Function name
    handler: appointments/get.list # Reference to file handler.js & exported function 'users'
    events: # All events associated with this function
      - http:
          path: api/appointments
          method: get
  appointmentGet: # Function name
    handler: appointments/get.get # Reference to file handler.js & exported function 'users'
    events: # All events associated with this function
      - http:
          path: api/appointment/{appointmentId}
          method: get
  appointmentCreate:
    handler: appointments/create.create # Reference to file handler.js & exported function 'users'
    events: # All events associated with this function
      - http:
          path: api/appointment/create
          method: post
  appointmentDelete:
    handler: appointments/delete.delete # Reference to file handler.js & exported function 'users'
    events: # All events associated with this function
      - http:
          path: api/appointment/{id}
          method: delete
  providerAppointmentsGet:
    handler: appointments/get.getProviderAppointments
    events:
      - http:
          path: api/appointments/provider/{providerId}
          method: get
  userAppointmentsGet:
    handler: appointments/get.getUserAppointments
    events:
      - http:
          path: api/appointments/user/{userId}
          method: get
resources:
  Resources:
    AppointmentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}